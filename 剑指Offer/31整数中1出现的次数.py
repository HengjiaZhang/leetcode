"""
求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。
ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
"""


# -*- coding:utf-8 -*-
class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        # 这段代码是下面那段代码的归纳
        result = 0
        x = 1
        while x <= n:
            result += n // (10 * x) * x
            if n % (10 * x) >= 2 * x:
                result += x
            elif n % (10 * x) >= x:
                result += n % (10 * x) - x + 1
            x *= 10
        return result

    def NumberOf1Between1AndN_Solution2(self, n):
        # 每有一个10，个位上就有一个1
        # 每有一个100， 十位上就有十个1
        # 每有一个1000， 百位上就有一百个1

        # 先算个位上的1
        n1 = n // 10
        if n % 10 >= 2:
            n1 += 1
        elif n % 10 >= 1:
            n1 += n % 10 - 1 + 1

        # 再算十位上的1
        n2 = n // 100 * 10
        if n % 100 >= 20:
            n2 += 10
        elif n % 100 >= 10:
            n2 += n % 100 - 10 + 1

        # 再算百位上的1
        n3 = n // 1000 * 100
        if n % 1000 >= 200:
            n3 += 100
        elif n % 1000 >= 100:
            n3 += n % 1000 - 100 + 1

        # 千位上的1
        n4 = n // 10000 * 1000
        if n % 10000 >= 2000:
            n4 += 1000
        elif n % 10000 >= 1000:
            n4 += n % 10000 - 1000 + 1

        # 万位上的1
        n5 = n // 100000 * 10000
        if n % 100000 >= 20000:
            n5 += 10000
        elif n % 100000 >= 10000:
            n5 += n % 100000 - 10000 + 1

        return n1 + n2 + n3 + n4 + n5